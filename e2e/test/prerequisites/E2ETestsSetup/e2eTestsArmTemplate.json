{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "StorageAccountName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "metadata": {
                "description": "The name of the storage account used by the IoT hub."
            }
        },
        "UserObjectId": {
            "type": "string",
            "metadata": {
                "description": "Signed in users's objectId"
            }
        },
        "FarRegion": {
            "type": "string",
            "defaultValue": "southeastasia",
            "metadata": {
                "description": "The region for the second IoT hub in a DPS that is far away from the test devices."
            }
        },
        "HubName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().id, 'hub')]",
            "metadata": {
                "description": "The name of the main IoT hub used by tests."
            }
        },
        "FarHubName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().id, '-hubfar')]",
            "metadata": {
                "description": "The name of the far away IoT hub used by tests."
            }
        },
        "DeviceProvisioningServiceName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().id, '-dps')]",
            "metadata": {
                "description": "The name of the DPS used by tests."
            }
        },
        "KeyVaultName": {
            "type": "string",
            "defaultValue": "[concat('env', resourceGroup().id)]",
            "metadata": {
                "description": "The name of the key vault for storing secrets needed for running tests."
            }
        },
        "OperationalInsightsName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().id, '-oi')]",
            "metadata": {
                "description": "The name of the operational insights instance."
            }
        },
        "SecuritySolutionName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().id, '-ss')]",
            "metadata": {
                "description": "The name of the security solution instance."
            }
        }
    },
    "variables": {
        "consumerGroupName": "[concat(resourceGroup().id, '/events/e2e-tests')]",
        "storageAccountId": "[concat(resourceGroup().id, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageAccountName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2018-02-14",
            "name": "[parameters('KeyVaultName')]",
            "location": "[resourceGroup().location]",
            "tags": {},
            "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": false,
                "accessPolicies": [
                    {
                        "objectId": "[parameters('UserObjectId')]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                            "secrets": ["all"],
                            "certificates": ["all"],
                            "keys": ["all"]
                        }
                    }
                ],
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "standard",
                    "family": "A"
                },
                "enableSoftDelete": false,
                "networkAcls": {
                    "defaultAction": "allow",
                    "bypass": "AzureServices",
                    "ipRules": [],
                    "virtualNetworkRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('StorageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "resources": [
                {
                    "type": "blobServices",
                    "apiVersion": "2019-06-01",
                    "name": "default",
                    "sku": {
                        "name": "Standard_LRS"
                    },
                    "properties": {
                        "deleteRetentionPolicy": {
                            "enabled": false
                        }
                    },
                    "resources": [
                        {
                            "type": "containers",
                            "apiVersion": "2019-06-01",
                            "name": "fileupload",
                            "properties": {
                                "publicAccess": "None"
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageAccountName'), 'default')]",
                                "[parameters('StorageAccountName')]"
                            ]
                        }
                    ],
                    "dependsOn": [
                        "[parameters('StorageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Devices/IotHubs",
            "apiVersion": "2019-11-04",
            "name": "[parameters('HubName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": 4
                    }
                },
                "cloudToDevice": {
                    "defaultTtlAsIso8601": "PT1H",
                    "maxDeliveryCount": 10,
                    "feedback": {
                        "ttlAsIso8601": "PT1H",
                        "lockDurationAsIso8601": "PT60S",
                        "maxDeliveryCount": 10
                    }
                },
                "messagingEndpoints": {
                    "fileNotifications": {
                        "ttlAsIso8601": "PT1H",
                        "lockDurationAsIso8601": "PT1M",
                        "maxDeliveryCount": 10
                    }
                },
                "StorageEndPoints": {
                    "$default": {
                        "sasTtlAsIso8601": "PT1H",
                        "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageAccountName'), ';AccountKey=', concat(listKeys(variables('storageAccountId'), '2019-06-01').keys[0].value))]",
                        "containerName": "fileupload"
                    }
                },
                "enableFileUploadNotifications": true
            },
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
            "apiVersion": "2018-04-01",
            "name": "[variables('consumerGroupName')]",
            "properties": {},
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
            ]
        },
        {
            "type": "Microsoft.Devices/IotHubs",
            "apiVersion": "2019-11-04",
            "name": "[parameters('FarHubName')]",
            "location": "[parameters('FarRegion')]",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {}
        },
        {
            "type": "Microsoft.Devices/provisioningServices",
            "sku": {
                "name": "S1",
                "capacity": 1
            },
            "name": "[parameters('DeviceProvisioningServiceName')]",
            "apiVersion": "2017-11-15",
            "location": "[resourceGroup().location]",
            "tags": {},
            "properties": {
                "iotHubs": [
                    {
                        "connectionString": "[concat('HostName=', parameters('HubName'), '.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', parameters('HubName'), 'iothubowner'), '2019-11-04').primaryKey)]",
                        "location": "[resourceGroup().location]",
                        "name": "[concat(parameters('HubName'),'.azure-devices.net')]"
                    },
                    {
                        "connectionString": "[concat('HostName=', parameters('FarHubName'), '.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', parameters('FarHubName'), 'iothubowner'), '2019-11-04').primaryKey)]",
                        "location": "[parameters('FarRegion')]",
                        "name": "[concat(parameters('FarHubName'),'.azure-devices.net')]"
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]",
                "[resourceId('Microsoft.Devices/IotHubs', parameters('FarHubName'))]"
            ]
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2017-03-15-preview",
            "name": "[parameters('OperationalInsightsName')]",
            "location": "[resourceGroup().location]",
            "properties": {},
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
            ]
        },
        {
            "type": "Microsoft.Security/IoTSecuritySolutions",
            "apiVersion": "2019-08-01",
            "name": "[parameters('SecuritySolutionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "workspace": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName'))]",
                "status": "Enabled",
                "export": [
                    "RawEvents"
                ],
                "disabledDataSources": [],
                "displayName": "[parameters('SecuritySolutionName')]",
                "iotHubs": [
                    "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
                ],
                "recommendationsConfiguration": [],
                "unmaskedIpLoggingStatus": "Enabled"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName'))]"
            ]
        }
    ],
    "outputs": {
        "hubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', parameters('HubName'), '.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', parameters('HubName'), 'iothubowner'), '2019-11-04').primaryKey)]"
        },
        "eventHubConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IoTHubs', parameters('HubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', parameters('HubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IoTHubs', parameters('HubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path)]"
        },
        "deviceProvisioningServiceConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', parameters('DeviceProvisioningServiceName'),'.azure-devices-provisioning.net;SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/ProvisioningServices/keys', parameters('DeviceProvisioningServiceName'), 'provisioningserviceowner'), '2017-11-15').primaryKey)]"
        },
        "storageAccountConnectionString": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')),'2019-06-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
        },
        "workspaceId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName')), '2017-03-15-preview').customerId]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[parameters('KeyVaultName')]"
        }
    }
}